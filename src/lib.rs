//! # ArgoFlows
//! 
//! ArgoFlows is a Rust library designed for managing workflows in Kubernetes using Argo Workflows. This crate provides modules for interacting with Kubernetes APIs, configuring workflows, handling errors, and managing custom types.
//! 
//! ## Features
//! - **API Integration**: Interact with Kubernetes resources related to Argo Workflows.
//! - **Configuration**: Configure workflows and other Kubernetes objects.
//! - **Error Handling**: Comprehensive error management to handle edge cases.
//! - **Custom Types**: Definitions for custom resource types and utilities.
//! 
//! ## Getting Started
//! To use this crate, add it to your `Cargo.toml`:
//! 
//! ```toml
//! [dependencies]
//! argoflows = "0.1"
//! ```
//! 
//! ## Example
//! Here is an example of how to create and manage a workflow:
//! 
//! ```rust
//! use argoflows::api;
//! use argoflows::config;
//! use argoflows::types;
//! use argoflows::error::Result;
//! 
//! fn main() -> Result<()> {
//!     // Initialize configuration
//!     let config = config::Config::new();
//! 
//!     // Create a workflow object
//!     let workflow = api::create_workflow(&config, "example-workflow")?;
//! 
//!     // Perform operations on the workflow
//!     println!("Workflow created: {:?}", workflow);
//! 
//!     Ok(())
//! }
//! ```
//! 
//! ## Modules
//! - [`api`](api/index.html): Contains functions to interact with Kubernetes resources.
//! - [`config`](config/index.html): Handles configuration management.
//! - [`error`](error/index.html): Defines error types and utilities.
//! - [`types`](types/index.html): Provides custom types for Argo Workflows.
//! 
//! ## References
//! - [Argo Workflows Documentation](https://argoproj.github.io/argo-workflows/)
//! - [Kubernetes API Documentation](https://kubernetes.io/docs/reference/kubernetes-api/)
//! 
//! ## License
//! This project is licensed under the MIT License. See the LICENSE file for details.
//! 
//! ## Acknowledgments
//! This crate was inspired by the [`k8s-openapi`](https://docs.rs/k8s-openapi/) crate, which provides autogenerated bindings for the Kubernetes API.


pub mod api;
pub mod config;
pub mod error;
pub mod types;
